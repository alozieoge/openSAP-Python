Python Fundamentals
===================

1. 1st steps in Python
2. Using variables
3. Performing simple input and output
4. Data types
5. Using if statements
6. using multiple if statements
7. Creating complex logical expressions

Why Python?
-----------
- Python is the most popular programming language according to IEEE Spectrum popularity index and TIOBE index.

- Popularity:
  - Available tutorials, examples, documentation. 
  - Open-source external libraries. 
  - Accessible support and solutions on forums, blogs, videos ...
  
- Easy to learn:
  - Emphasizes readability.
  - Guiding principles for Python development - 'Zen of Python'. 
  
- Industrial application:
  - Supports real projects.
  - Supports object-orientation or functional programming paradigms.
  - Dominant in machine learning and AI.


Mathematical Operators
----------------------

Description      | Operator |	Example  | Result             |
-----------------+----------+----------+--------------------|
Addition	       |     +	  |  2 + 3   | 5                  |
Subtraction	     |     -    |	 2 - 3	 | -1                 |
Multiplication   |	   *    |	 2 * 3	 | 6                  |
Division	       |     /    |	 7 / 3	 | 2.3333333333333335 |
Integer Division |	  //    |	 7 // 3	 | 2                  |
Modulo	         |     %    |	 7 % 3   | 1                  |
Exponentiation	 |    **    |	2 ** 0.5 | 1.4142135623730951 |

- Python can handle very large nummbers.
  - Only limited by the size of machine's internal memory.
  

Variables
---------
- Variables hold data. 
- Data can be assigned to or read from a variable. 
- Spend the time to use readable and understandable variable names.


Input and Output
----------------
- Input:   i = input()
- output:  print(i)

- input() return a string data-type. 
- To convert the string to a number, you must cast it to an integer int(input()) or a floating point number float(input()).


Data types
---------
Python primitive data types:
- Interger e.g. 42, -100, 23, 0
- Float e.g. 3.142, -0.012, 3.2e10
- String e.g. "This is a string", 'x', 'aabc123' 
- Boolean e.g True, False

- Python represents floating point numbers with a precision of 15 or 16 digits in the binary system, allowing it to work with very small or very large numbers. 
  - This may limit the precision of floating points numbers above 16 digits after the decimal point. 
  
- Use type() to check the data type of a variable. 
- Convert one data type to another by casting.

Logical operators for boolean data types:

Operator | Explanation | Example     |
---------+-------------+-------------|
not	     | Negation    | not y       |
and	     | Logical AND | x and y     |
or       | Logical OR  | a or b or c |

Casting:
- Casting an integer (positive or negative) to a boolean always returns True except the integer is 0.
- Casting a string to a boolean always returns True except the string is empty.


If Statements
-------------
- Conditionals / comparison operators are used to implement decision statements. 

Comparison operators:

Operator | Explanation              |
---------+--------------------------+
==       | Equality                 |
!=       | Inequality               |
<        | Smaller than             |
>        | Greater than             |
<=       | Less than or equal to    |
>=       | Greater than or equal to |

- Comparing strings in Python actually compares the unicode representation of the sum of the string characters. 

- Indentation denotes code block in a conditional statement. 
  - Indenting a line / block of code without a condition or loop returns an 'IndentationError'.


Multiple If Statements
----------------------
- Python allows to check more than one condition; either one after another or nested within themselves. 
- The sequence of the conditions should be checked i.e. first check more specific conditions before more general ones. 


Complex Logical Expressions
---------------------------
- Create complex logical expressions by combining conditional statements with logical operators. 
- By default: 'and' has higher priority than 'or' 
- Use parentheses to:
  - Change the order of complex logical expressions. 
  - Give priority to a conditional expression.
  - Make an explicit conditional expression.
  
- Use string methods to validate user input:
  .isdigit(), .isdecimal(), .isspace(), .isalpha(), isalnum()


Tip:
----
- Always start simple. 
- Test each building block at each step. 
- Build up complexity only if tests are satisfied. 
- Repeat!

Week 5 - Functions
==================

Objectives
----------
1. Why functions?
2. Returning results from functions
3. Adding parameters to functions
4. Visibility of variables
5. Combining functions
6. Methods vs. functions
7. Destructuring assignment


Functions
---------
- A function maps an element / set of element x to another element / set of elements y.

Structure of a function:
- name
- input parameters
- process input
- return output

Why functions?
- Structures a program. 
- Makes a program more readable.
- Enables reusability of code.

Python function structure:
- `def` keyword
- function name
- optional parameter list
- colon :
- docstring
- function body
  - indented statements
  - optional return statement
  
- Docstrings provide information on what a function does.
- To view a function docstring:
>> function_name?

- Use a docstring to provide explanation / description of your functions, especially when creating them.


Returning results from functions
--------------------------------
- Functions can have 0, 1, 2 ... return values. 
- A return value is specified in a function using:
>> return return_value

- If there is no return value, a `None` (an object of NoneType) is returned.
- The return value can be a simple (string, int, boolean, float) or complex (list, dict, set, tuple) data type.

- If a function returns a boolean (True / False), the function name can be called directly in a conditional (if) statement. 
>> def is_python_good():
>>   return True
>>
>> if is_python_good:
>>   print("Learn Python!")

- The `return` keyword denotes the end of execution / exit point in a function. 
- Any statement after the return statement is not executed.


Adding parameters to functions
------------------------------
- Function parameters enable us to:
  - adapt the function to different scenarios
  - reuse functions with different inputs / arguments
  
- A function can be defined with 0, 1, 2 ... parameters
- If a function parameter is provided with a default value, the default value is used if no user input argument is provided.

Convention: 
- If a function returns True or False, define the function name as `is_...`
- If a function returns True or False, you can directly return the result of the comparison from the function.

- You can specify the arguments to a function in any order by using the parameter names when calling the function. 


Visibility of variables / Variable scope
----------------------------------------
- Global variables are accessible everywhere in the program. 
- Local variables are only visible within their scope of definition e.g. inside a function, loop, conditional block.

- Local variables can hide global variables. 
  - A local variable inside a function will have priority / be considered over (hide) a global variable with the same name, within that function.

** It is recommended not to use / manipulate global variables within a local context / function. **

- To use a global variable in a function, either: 
  - Pass it as an argument to the function and if necessary, return the variable as an output. ✅
  - Specify it as a global variable using the `global` keyword. ❌

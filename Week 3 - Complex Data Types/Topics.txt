Complex Data Types
==================

Lessons
-------
1. Tuples
2. Dictionaries
3. Lists, dictionaries and tuples
4. Safe dictionary access
5. Functions and methods for complex data types
6. While loop


Tuples
------
- Tuples are sequences similar to lists but use parentheses instead of square brackets. 
>> my_tuple = (item_1, item_2, ..., item_n)

- Tuples are immutable;
  - cannot change its content. 
  - cannot add elements / attributes / values.
  - cannot delete elements.
  - cannot change the value of an attribbute.
  - allow only read-access.
- else, you get a TypeError - tuple object does not support item assignment.

- You can only assign a new tuple to the same variable.
  
- Can be combined wih lists to give a more powerful data structure.
  
Basic Operations:
>> len()
>> my_tuple[index]
>> my_tuple[start_index:end_index]
>> my_tuple.count(value) : Number of elements with value.
>> my_tuple.index[value] : Index of first element with value.
>> my_list = list(my_tuple) : Cast tuple into a list
>> my_tuple = tuple(my_list) : Cast list into a tuple


Dictinoaries
------------
- A sequence in which each value has a key. 
- Elements are accessed by their key not index.

- Dictionaries consts of key-value pairs enclosed in curly braces. 
>> my_dict = { key_1 : value_1, key_2 : value_2, ..., key_n : value_n }

- Dictionaries are mutable: can add, change and delete entries / elements. 
- Accessing a non-existent key leads to a KeyError.

- In a dictionary, all data types can be values. 
- Only immutable data types can be keys - string, int, float, boolean, tuple.
  - This is because mutable data types are unhashable. 
  
- Iterating over a dictionary using a for loop returns all the keys.
>> for key in my_dict:
>>   print(key, my_dict[key])

Functions and Methods:
>> len() : number of key-value pairs.
>> .keys() : Returns all keys.
>> .values() : Returns all values.
>> .items() : Retuns all key-value pairs as tuples.


When to use lists, tuples or dictionaries
-----------------------------------------

Lists
- Recommended when objects of same data type are handled / needed. 
- Access only by index. 

Tuples
- Immutable, not changeable. 
- Structure / number of elements in data is not to be changed. 

Dictionaries
- Access via key; key is required. 
- Random access of eleemnts is possible; O(1) time-complexity for access. 
- Structure of objects can be changed.

- Combination of these types are useful and often necessary. 
- It is best to think carefully about what is the best data type for every situation.


Safe Dictionary Access
----------------------
- Accessing a non-existing key in a dictionary leads to a KeyError.

Solution:
1. Use keyword `in`
>> if key in my_dict:
>>   ...
>> else:
>>   ...

2. Use get() method with a custom error message.
>> my_dict.get(key, default)  // A custom error message can be defined in `default`.


Functions and Methods for Complex Data Types
--------------------------------------------

 Method       | List | Tuple | Dictionary |
--------------+------+-------+------------+
.sort()       |  x   |       |            |
.append(a)    |  x   |       |            |
.pop(i)       |  x   |       |      x     |
.insert(i, a) |  x   |       |            |
.remove(a)    |  x   |       |            |
.count(a)     |  x   |   x   |            |
.index(a)     |  x   |   x   |            |
.keys()       |      |       |      x     |
.values()     |      |       |      x     |
.items()      |      |       |      x     |


Function      | List | Tuple | Dictionary |
--------------+------+-------+------------+
del object[a] |  x   |       |      x     |
len()         |  x   |   x   |      x     |
max()         |  x   |   x   |            |
max()         |  x   |   x   |            |
sorted()      |  x   |   x   |            |


While Loop
----------
- For loops iterate over a sequence. 
- While loops iterate until a given condition is False. 

>> while (condition):
>>   ...

- While loops are prone to errors when used as a simple counter. Use for loops instead.
- Always check the boundaries of the condition when using while loops.
- Beware of infinite loop.

- A `break` keyword within an `if` statement is used to exit the while loop if the `if` condition is met. 
- Can be combined with a while True, which is an infinite loop. 

>> while True:
>>   ...
>>   if condition:
>>     break
>>   ...
